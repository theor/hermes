#pragma once

#include "../renderer.h"
#include "../rocket.h"
#include "fonts/IndieFlower_Regular16pt7b.h"

//const int8_t stem_offsets[] PROGMEM = {
//    0, 1, 2, 3, 3, 2, 1, 0, -1, -2, -3, -3, -2, -1};


// length 12
const uint8_t seq_short_long[] PROGMEM = {0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0};


namespace Rain {
    const unsigned char bmp_sun[] PROGMEM = {
            // 'sun', 32x31px
            0x00, 0x01, 0x80, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x0f, 0xf0, 0x00,
            0x00, 0x0f, 0xf0, 0x00, 0x07, 0xc0, 0x03, 0xe0, 0x07, 0x0f, 0xf1, 0xe0, 0x07, 0x0f, 0xf1, 0xe0,
            0x06, 0x3f, 0xfc, 0x60, 0x06, 0x3f, 0xfc, 0x60, 0x00, 0xff, 0xfe, 0x00, 0x19, 0xff, 0xff, 0x80,
            0x19, 0xff, 0xff, 0x90, 0x39, 0xff, 0xff, 0x9c, 0x79, 0xff, 0xff, 0x9e, 0xf9, 0xff, 0xff, 0x9f,
            0x79, 0xff, 0xff, 0x9e, 0x39, 0xff, 0xff, 0x9c, 0x19, 0xff, 0xff, 0x90, 0x00, 0xff, 0xfe, 0x00,
            0x00, 0xff, 0xfe, 0x00, 0x06, 0x3f, 0xfc, 0x60, 0x06, 0x3f, 0xfc, 0x60, 0x07, 0x0f, 0xf1, 0xe0,
            0x07, 0xc0, 0x03, 0xe0, 0x07, 0xc0, 0x03, 0xe0, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x0f, 0xf0, 0x00,
            0x00, 0x07, 0xc0, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x01, 0x80, 0x00
    };
    // 'sprite_clouds0', 30x10px
    const unsigned char epd_bitmap_sprite_clouds0[] PROGMEM = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00,
            0x07, 0x7f, 0x60, 0x00, 0x0f, 0xff, 0xf6, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xc0,
            0x3f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00
    };
// 'sprite_clouds1', 30x10px
    const unsigned char epd_bitmap_sprite_clouds1[] PROGMEM = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00,
            0x03, 0xc0, 0x00, 0x00, 0x1f, 0xe6, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x00, 0x7f, 0xff, 0x80, 0x00,
            0x3f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00
    };
// 'sprite_clouds2', 30x10px
    const unsigned char epd_bitmap_sprite_clouds2[] PROGMEM = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00,
            0x01, 0xf0, 0x60, 0x00, 0x01, 0xfe, 0xf0, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x1f, 0xff, 0xfc, 0x00,
            0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00
    };
// 'sprite_clouds3', 30x10px
    const unsigned char epd_bitmap_sprite_clouds3[] PROGMEM = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x0f, 0xc0, 0x00,
            0x00, 0x1f, 0xe6, 0x00, 0x03, 0x1f, 0xff, 0x00, 0x07, 0xbf, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xe0,
            0x7f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00
    };
    const unsigned char *epd_bitmap_clouds[4] = {
            epd_bitmap_sprite_clouds0,
            epd_bitmap_sprite_clouds1,
            epd_bitmap_sprite_clouds2,
            epd_bitmap_sprite_clouds3,
    };
    // 'sprite_bolt0', 64x128px
    const unsigned char epd_bitmap_sprite_bolt0[] PROGMEM = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0c, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x60, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x01, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0xc0, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x30, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x40, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x40, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0xc0, 0x00, 0x00, 0x00,
            0x00, 0x03, 0x00, 0x01, 0x60, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x10, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x01, 0x18, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x0c, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x01, 0x01, 0x80, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x80, 0x00, 0x00,
            0x00, 0x04, 0x00, 0x01, 0x00, 0x40, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x40, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x20, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x80, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x08, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x80, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x80, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x10, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x40, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x0e, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x80, 0x00, 0x00,
            0x00, 0x00, 0x04, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };
// 'sprite_bolt1', 64x128px
    const unsigned char epd_bitmap_sprite_bolt1[] PROGMEM = {
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x40, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x40, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x10, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x07, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x98, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x06, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x04, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x01, 0xf0, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    };

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 2080)
    const int epd_bitmap_bolts_LEN = 2;
    const unsigned char *epd_bitmap_bolts[2] = {
            epd_bitmap_sprite_bolt0,
            epd_bitmap_sprite_bolt1
    };
    const char *Labels[] = {
            "Tout", "est", "mieux", "avec", "toi"
    };
    const size_t LabelsSize = sizeof_array(Labels);


    enum class RainTracks : uint8_t {
        Track_loop = 0,
        Track_loop_play = 1,
        Track_sun_x = 2,
        Track_sun_y = 3,
        Track_rain = 4,
        Track_clouds = 5,
        Track_TextLabel = 6,
    };
    const uint8_t NUM_DROPS = 80;

    struct Drop {
        uint8_t x, y;
        bool alive;
    };

    class RainRenderer
            : public Renderer {

    protected:
        uint8_t i;
        Drop icons[NUM_DROPS];
        elapsedMillis _elapsed;
        elapsedMillis _totalElapsed;
        Timer _boltTimer;
        const struct sync_track *s_tracks[7];
    public:
        virtual void press(bool pressed) {}

        virtual void initTracks(sync_device *device) {
            s_tracks[(int) RainTracks::Track_loop] = sync_get_track(device, "loop#goto");
            s_tracks[(int) RainTracks::Track_loop_play] = sync_get_track(device, "loop#play");
            s_tracks[(int) RainTracks::Track_sun_x] = sync_get_track(device, "sun#X");
            s_tracks[(int) RainTracks::Track_sun_y] = sync_get_track(device, "sun#Y");
            s_tracks[(int) RainTracks::Track_rain] = sync_get_track(device, "rain#intensity");
            s_tracks[(int) RainTracks::Track_clouds] = sync_get_track(device, "clouds#x");
            s_tracks[(int) RainTracks::Track_TextLabel] = sync_get_track(device, "text#label");
        }

        virtual void start() {
            i = 0;
            for (int8_t f = 0; f < NUM_DROPS; f++) {
                icons[f].alive = false;
            }
        }

        const sync_track *track(RainTracks t) { return s_tracks[(uint8_t) t]; }

        int get_int(RainTracks t, float row_f) { return sync_get_val_int(s_tracks[(uint8_t) t], row_f); }

        virtual void update(bool buttonHeld) {
            if (_elapsed < 33)
                return;
            long totalElapsed = _totalElapsed;
            float row_f = curtime_ms * rps / 1000.0f;
            int play = get_int(RainTracks::Track_loop_play, row_f);
            int clouds = get_int(RainTracks::Track_clouds, row_f);
            if (buttonHeld) {
                resetSleepTimer();
                if (play)
                    curtime_ms += 33;
            } else if (curtime_ms > 0) {
                curtime_ms -= 33;
                curtime_ms = min(curtime_ms, 3000);
            }
            display.clearDisplay();

//            int loopDelta = sync_get_val_int(s_tracks[RainTracks::Track_loop], curtime_ms * rps / 1000.0);
//            if (loopDelta > 0)
//                curtime_ms = (loopDelta * 1000) / rps;

////         return row - loopDelta;

            int8_t x = sync_get_val_int(track(RainTracks::Track_sun_x), row_f);
            int8_t y = sync_get_val_int(track(RainTracks::Track_sun_y), row_f);
//
//            _elapsed = 0;
            display.drawBitmap(x, y, bmp_sun, 32, 31, WHITE);
//
//            uint8_t stem_length = (uint8_t) sync_get_val(s_tracks[TRACK_FLOWER_STEM], row_f);
//            for (uint8_t s = 0; s < stem_length; s++) {
//                display.drawPixel(30 + stem_offsets[s % 13], 128 - 5 - s, WHITE);
//            }
//
//            {
//                int8_t flowerFrame = (int8_t) sync_get_val_int(s_tracks[TRACK_FLOWER_OPENING], row_f);
//                if (flowerFrame > 8)
//                    flowerFrame = 8;
//                if (flowerFrame > 0)
//                    display.drawBitmap(24, 50, epd_flower_allArray[flowerFrame], 16, 16, WHITE);
//                display.drawBitmap(sync_get_val_int(s_tracks[TRACK_HEART_X], row_f),
//                                   sync_get_val_int(s_tracks[TRACK_HEART_Y], row_f), bmp_heart, HEART_WIDTH,
//                                   HEART_HEIGHT, WHITE);
//            }
//            // j++;
//
            const uint8_t groundLevel = 122;
            // ground
            display.drawFastHLine(0, groundLevel + 1, 64, WHITE);
            int8_t rainIntensity = sync_get_val_int(track(RainTracks::Track_rain), row_f);
            if (rainIntensity > NUM_DROPS)
                rainIntensity = NUM_DROPS;
            for (int8_t f = 0; f < rainIntensity; f++) {
                if (!icons[f].alive) {
                    icons[f] = {
                            (uint8_t) random(64),
                            14,
                            true
                    };
                    break;
                }
            }
            for (int8_t f = 0; f < NUM_DROPS; f++) {
                if (icons[f].alive) {
                    icons[f].y += 2;
                    icons[f].x += 1;
                    if (icons[f].x > display.width())
                        icons[f].x = 0;
                    if (icons[f].y > groundLevel)
                        icons[f].alive = false;
                    else {

                        display.drawPixel(icons[f].x, icons[f].y, WHITE);
                    }
                }
            }

            for (int8_t c = 0; c < clouds; ++c) {
                // two lines
                int16_t y = (c % 2 == 0) ? 3 : 6;
                // speed 1/2/3
                int16_t speed = (c % 3) + 1;
                // add horiz movement
                int16_t x = (c * 39 + speed * (totalElapsed / 600)) % (64 + 20) - 20 + fmax(0, 100 - rainIntensity);


                display.drawBitmap(x - 1, y - 1, epd_bitmap_clouds[c % 4], 30, 10, BLACK);
                display.drawBitmap(x, y, epd_bitmap_clouds[c % 4], 30, 10, WHITE);
            }

            if (_boltTimer.endedCooldown()) {
                _boltTimer.setDuration(random(3000, 5000));
                _boltTimer.setCooldown(random(300, 600));
                display.invertDisplay(false);
//                Serial.println("ended");
            }
            _boltTimer.update();
            if (rainIntensity > 60) {
                float bolt_progress = _boltTimer.cooldownProgress();
//            Serial.println(bolt_progress);
                if (bolt_progress > 0) {
                    uint8_t bolt_on = seq(seq_short_long, 12, bolt_progress, _boltTimer.getCooldown(), false);
//                    uint8_t bolt_on = seq_short_long[((/*0-500*/_boltTimer - 1000) * 12 / 500) % 12];
                    if (bolt_on)
                        display.drawBitmap(((_boltTimer.getCycleCount() * 11) % 15) - 7, 0,
                                           epd_bitmap_bolts[_boltTimer.getCycleCount() % epd_bitmap_bolts_LEN], 64, 128,
                                           WHITE);
                    display.invertDisplay(bolt_on);
                }
            }
            if (_boltTimer.endedCooldown()) {
                _boltTimer.setDuration(random(1000, 5000));
                _boltTimer.setCooldown(random(300, 600));
                display.invertDisplay(false);
            }

//
//            if (buttonHeld) {
//                icons[i][0] = x + +18 + random(8);
//                icons[i][1] = y + 15;
//                i = ((i + 1) % NUM_DROPS);
//            }
//
//            bool playing = sync_get_val_int(s_tracks[TRACK_LOOP_PLAY], row_f) > 0;
//
//            for (int8_t f = 0; f < NUM_DROPS; f++) {
//                if (!playing && icons[f][1] == 123) { curtime_ms += 160; }
//                if (icons[f][1] < 123)
//                    icons[f][1] += 2;
//                else
//                    icons[f][1] = 128;
//            }
//            for (int8_t f = 0; f < NUM_DROPS; f++) {
//                display.drawPixel(icons[f][0], icons[f][1], WHITE);
//            }
//
//            if (playing)
//                curtime_ms += 160;
//
            int label = get_int(RainTracks::Track_TextLabel, row_f);
            if (label >= 0) {
                display.setCursor(4, 60);
                display.setTextWrap(false);
                display.setFont(&IndieFlower_Regular12pt7b);
                display.println(Labels[label % LabelsSize]);
//            display.println(_elapsed);
            }
            display.display();
        }
    };
}