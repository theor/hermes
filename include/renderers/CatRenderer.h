//
// Created by theor on 2022-07-29.
//

#ifndef SIM_CATRENDERER_H
#define SIM_CATRENDERER_H

#include <renderer.h>
#include <Adafruit_SSD1306.h>
#include <rocket.h>
#include "fonts/Pacifico_Regular20pt7b.h"
// 'cat_0', 38x22px
const unsigned char epd_bitmap_cat_0 [] PROGMEM = {
        0x00, 0x00, 0x00, 0x02, 0x00, 0x03, 0x80, 0x00, 0x06, 0x80, 0x07, 0xf0, 0x00, 0x0e, 0x80, 0x07,
        0xfc, 0x00, 0x1f, 0x00, 0x0f, 0xfe, 0x00, 0x1f, 0xc0, 0x0f, 0x8f, 0xfe, 0x3f, 0x60, 0x1c, 0x02,
        0xff, 0x3f, 0xa0, 0x10, 0x00, 0xff, 0x7f, 0xa0, 0x00, 0x00, 0xff, 0xdf, 0xe0, 0x00, 0x00, 0xff,
        0xaf, 0xf0, 0x00, 0x01, 0xff, 0xdb, 0xe0, 0x00, 0x07, 0xff, 0xe7, 0x80, 0x00, 0x0f, 0xff, 0xfc,
        0x80, 0x00, 0x1f, 0x80, 0xfe, 0x00, 0x00, 0x1c, 0x01, 0x07, 0x80, 0x00, 0x18, 0x00, 0x03, 0xe0,
        0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'cat_2', 38x22px
const unsigned char epd_bitmap_cat_2 [] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
        0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x07, 0x40, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00,
        0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x1f, 0xb0, 0x00, 0x00, 0x00, 0x1f, 0xd0, 0x00, 0x00, 0x0f,
        0xbf, 0xd0, 0x00, 0x00, 0x1f, 0xaf, 0xf0, 0x00, 0x00, 0xff, 0xd7, 0xf8, 0x01, 0xe3, 0xbf, 0xed,
        0xf0, 0x01, 0xff, 0xbf, 0xf3, 0xc0, 0x03, 0xff, 0x3f, 0xfc, 0x40, 0x07, 0xfc, 0x3f, 0xef, 0x40,
        0x07, 0xe0, 0x3f, 0x5f, 0x00, 0x00, 0x00, 0x1e, 0x3e, 0x00, 0x00, 0x00, 0x1e, 0x3c, 0x00, 0x00,
        0x00, 0x0f, 0x38, 0x00, 0x00, 0x00, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'cat_1', 38x22px
const unsigned char epd_bitmap_cat_1 [] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x07,
        0xe0, 0x00, 0x01, 0xa0, 0x07, 0xfc, 0x00, 0x03, 0xa0, 0x03, 0xff, 0x00, 0x07, 0xc0, 0x01, 0xff,
        0x80, 0x07, 0xf0, 0x01, 0xe3, 0xfe, 0x07, 0xc8, 0x00, 0x00, 0xbf, 0x8f, 0xf8, 0x00, 0x00, 0x3f,
        0x9f, 0xc8, 0x00, 0x00, 0x3f, 0xd7, 0xf8, 0x00, 0x00, 0x3f, 0xcb, 0xfc, 0x00, 0x00, 0xff, 0xf6,
        0xf8, 0x00, 0x01, 0xff, 0xf9, 0xe0, 0x00, 0x01, 0xf7, 0xfe, 0x20, 0x00, 0x01, 0xc1, 0xdf, 0xa0,
        0x00, 0x01, 0x80, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00,
        0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00
};
// 'cat_3', 38x22px
const unsigned char epd_bitmap_cat_3 [] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00,
        0x00, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00,
        0x00, 0x7e, 0xc0, 0x00, 0x00, 0x00, 0x7f, 0x40, 0x00, 0x00, 0x00, 0xff, 0x40, 0x00, 0x00, 0x00,
        0xbf, 0xc0, 0x06, 0x00, 0x7e, 0x5f, 0xe0, 0x0f, 0x83, 0xfe, 0xb7, 0xc0, 0x1f, 0xff, 0xff, 0xcf,
        0x00, 0x1f, 0xfe, 0xff, 0xf1, 0x00, 0x07, 0xfc, 0xff, 0xf9, 0x00, 0x01, 0x80, 0xff, 0xfc, 0x80,
        0x00, 0x00, 0xff, 0xff, 0xc0, 0x00, 0x00, 0xf7, 0x07, 0xe0, 0x00, 0x00, 0xf0, 0x00, 0x60, 0x00,
        0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 512)
const int epd_bitmap_cat_LEN = 4;
const unsigned char* epd_bitmap_cats[4] = {
        epd_bitmap_cat_0,
        epd_bitmap_cat_1,
        epd_bitmap_cat_2,
        epd_bitmap_cat_3
};

namespace Cat {



    enum class Tracks : uint8_t {
        Track_loop = 0,
        Track_loop_play = 1,
        Track_sun_x = 2,
        Track_sun_y = 3,
        Track_rain = 4,
        Track_clouds = 5,
        Track_TextLabel = 6,
    };


    class CatRenderer
            : public Renderer
    {
    protected:
        const struct sync_track *s_tracks[7];
        elapsedMillis _elapsed;

        const sync_track *track(Tracks t) { return s_tracks[(uint8_t) t]; }

        int get_int(Tracks t, float row_f) { return sync_get_val_int(s_tracks[(uint8_t) t], row_f); }

    public:
        CatRenderer(Adafruit_SSD1306* display) : Renderer(display){}
        virtual void start() {}

        virtual void press(bool pressed) {
            if(pressed)
                i++;
        }

        const char *getPrefix() override
        {
            return "rain";
        }

        virtual void initTracks(sync_device *device)
        {
            s_tracks[(int) Tracks::Track_loop] = sync_get_track(device, "loop#goto");
            s_tracks[(int) Tracks::Track_loop_play] = sync_get_track(device, "loop#play");
            s_tracks[(int) Tracks::Track_sun_x] = sync_get_track(device, "sun#X");
            s_tracks[(int) Tracks::Track_sun_y] = sync_get_track(device, "sun#Y");
            s_tracks[(int) Tracks::Track_rain] = sync_get_track(device, "rain#intensity");
            s_tracks[(int) Tracks::Track_clouds] = sync_get_track(device, "clouds#x");
            s_tracks[(int) Tracks::Track_TextLabel] = sync_get_track(device, "text#label");
        }

        virtual void update(bool buttonHeld)
        {
            if (_elapsed < 33)
                return;
            _elapsed = 0;
            float row_f = getRowF();
            display->clearDisplay();
//            display.setCursor(0, 0);
//            display.println("cat");

display->drawBitmap(10,20, epd_bitmap_cats[(i / 4) % epd_bitmap_cat_LEN], 38, 22, WHITE);
            i++;
        }
    protected:
        unsigned int i;
    };

}

#endif //SIM_CATRENDERER_H
